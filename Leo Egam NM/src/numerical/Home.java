/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package numerical;

import java.awt.Color;
import static java.awt.Color.CYAN;
import java.awt.Font;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LEO
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
       
        
        setExtendedState(MAXIMIZED_BOTH);
        tabl.getTableHeader().setBackground(new Color(202,212,223)); //221, 219, 222
        tabl.getTableHeader().setFont(new Font("Bookman old style", Font.BOLD, 14));
        Color LightBlue = new Color(221, 219, 222);
        tabl.setBackground(LightBlue);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabl = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        grp = new javax.swing.JPanel();
        rrs = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        sel = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        eqn = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        en2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        en3 = new javax.swing.JTextField();
        rst = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("E G A M    L E O    S.     B S C p E - II");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        tabl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabl);

        jLabel6.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("GRAPHICAL REPRESENTATION");

        jLabel7.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("TABULATED RESULT");

        grp.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout grpLayout = new javax.swing.GroupLayout(grp);
        grp.setLayout(grpLayout);
        grpLayout.setHorizontalGroup(
            grpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 798, Short.MAX_VALUE)
        );
        grpLayout.setVerticalGroup(
            grpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        rrs.setBackground(new java.awt.Color(0, 0, 0));
        rrs.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        rrs.setForeground(new java.awt.Color(0, 0, 0));

        jLabel8.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("ROOT APPROXIMATION");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(grp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(72, 72, 72)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rrs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jSeparator1)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 83, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 197, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(rrs, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(grp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1230, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-10, 0, 1230, 640);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        sel.setBackground(new java.awt.Color(255, 255, 255));
        sel.setForeground(new java.awt.Color(51, 51, 51));
        sel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "GRAPHICAL", "INCREMENTAL", "BISECTION", "FALSE POSITION", "SIMPLE FIXED-POINT", "NEWTON-RAPHSON", "SECANT " }));
        sel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("CHOOSE YOUR METHOD");

        eqn.setBackground(new java.awt.Color(255, 255, 255));
        eqn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eqnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("EQUATION");

        en2.setBackground(new java.awt.Color(255, 255, 255));
        en2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                en2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ENTER YOUR xL");

        en3.setBackground(new java.awt.Color(255, 255, 255));
        en3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                en3ActionPerformed(evt);
            }
        });

        rst.setBackground(new java.awt.Color(255, 255, 255));
        rst.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        rst.setForeground(new java.awt.Color(0, 0, 0));
        rst.setText("AWA ANG RESULT");
        rst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rstActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("ENTER YOUR xU");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(eqn, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(en2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(en3)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rst, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rst, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eqn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(en2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(en3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 630, 1220, 100);

        setSize(new java.awt.Dimension(1236, 755));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selActionPerformed
        // TODO add your handling code here:
                                                
        if(sel.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "I N V A L I D   S E L E C T I O N");
        }else if (sel.getSelectedIndex() == 1){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"x", "fx"});
            jLabel4.setText("Enter xU");
            en2.setText("");
            en3.setEnabled(false);
            en3.setText("");
        }else if(sel.getSelectedIndex() == 2){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"Iterations", "xL", "xR", "xU", "f(xl)", "f(xU)", "Error", "f(xl)*f(xU)"});
            jLabel4.setText("E N T E R  Y O U R  DeltaX");
            en2.setText("");
            en3.setEnabled(true);
            en3.setText("");
        }else if (sel.getSelectedIndex() == 3){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"Iterations", "xL", "xR", "xU", "f(xl)", "f(xU)", "Error"});
            jLabel4.setText("E N T E R  Y O U R  xU");
            en2.setText("");
            en3.setEnabled(true);
            en3.setText("");
        }else if (sel.getSelectedIndex() == 4){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"Iterations", "xL", "xU", "xR", "f(xR)", "Error"});
            jLabel4.setText("E N T E R  Y O U R  xU");
            en2.setText("");
            en3.setEnabled(true);
            en3.setText("");
        }else if (sel.getSelectedIndex() == 5){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"Iterations", "xL", "fxL", "Ea"});
            jLabel4.setText("----");
            en2.setText("");
            en3.setEnabled(false);
            en3.setText("");
        } else if (sel.getSelectedIndex() == 6){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"Iterations", "xL", "fxL", "x1", "f(x1)", "Ea"});
            jLabel4.setText("----");
            en2.setText("");
            en3.setEnabled(false);
            en3.setText("");
            } else if (sel.getSelectedIndex() == 7){
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            rrs.setText("");
            grp.removeAll();
            grp.revalidate();
            grp.repaint();
            model.setColumnIdentifiers(new String[]{"Iterations", "xL", "fxL", "x1", "f(x1)", "Ea"});
            jLabel4.setText("----");
            en2.setText("");
            en3.setEnabled(false);
            en3.setText("");
        }
    
    }//GEN-LAST:event_selActionPerformed

    private void en2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_en2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_en2ActionPerformed

    private void en3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_en3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_en3ActionPerformed

    private void rstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rstActionPerformed
        // TODO add your handling code here:
         if (sel.getSelectedIndex() == 1) {
            DefaultTableModel model = (DefaultTableModel) tabl.getModel();
            model.setRowCount(0);
            String eqStr = eqn.getText().replaceAll("\\s", "");
            double valX = Double.parseDouble(en2.getText());
            DecimalFormat format = new DecimalFormat("#.####");

            ArrayList<Object[]> dataList = new ArrayList<>();

            double prevY = evaluate(eqStr, valX);
            String decX = format.format(valX);
            String decY = format.format(prevY);
            dataList.add(new Object[]{decX, decY});

            double step = 0.2;
            double currX = valX + step;
            double currY = evaluate(eqStr, currX);
            boolean signChange = false;

            double rootVal = Double.NaN;

            try {

                while (!signChange) {
                    decX = format.format(currX);
                    decY = format.format(currY);
                    dataList.add(new Object[]{decX, decY});
                    model.setRowCount(0);

                    for (Object[] row : dataList) {
                        model.addRow(row);
                    }

                    if (prevY * currY < 0) {
                        double tolerance = 0.0001;
                        double root = 0;
                        double lowerBound = currX - step;
                        double upperBound = currX;

                        do {
                            root = (lowerBound * evaluate(eqStr, upperBound) - upperBound * evaluate(eqStr, lowerBound))
                            / (evaluate(eqStr, upperBound) - evaluate(eqStr, lowerBound));

                            double fA = evaluate(eqStr, lowerBound);
                            double fC = evaluate(eqStr, root);

                            if (fC == 0.0) {
                                break;
                            } else if (fA * fC < 0) {
                                upperBound = root;
                            } else {
                                lowerBound = root;
                            }
                        } while (Math.abs(upperBound - lowerBound) > tolerance);
                        
                        
                        rootVal = root;
                        rrs.setText(format.format(rootVal));

                        signChange = true; // Set signChange to true to exit the loop

                        graph(en2.getText(), root);
                    } else {
                        prevY = currY;
                        currX += step;
                        currY = evaluate(eqStr, currX);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            //Incremental Method
        } else if (sel.getSelectedIndex() == 2){
            try {
                if (eqn.getText().isEmpty() || en2.getText().isEmpty() || en3.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Enter the data needed, Thank you!");
                } else {
                    DecimalFormat format = new DecimalFormat("#.########");
                    ArrayList<Object[]> dataList = new ArrayList<>();
                    double marginE = 0.0001;
                    double valL = Double.parseDouble(en2.getText());
                    double delta = Double.parseDouble(en3.getText());
                    double root = 0;
                    double valU = valL + delta;
                    int iterCount = 0;
                    double prevU = 0;
                    int previousRowIndex = -1;
                    int lastRowIndex = -1;

                    double error = Math.abs(valU - prevU) / Math.abs(valU) * 100;

                    while (error > marginE) {
                        iterCount++;
                        double fL = evaluate(eqn.getText(), valL);
                        double fU = evaluate(eqn.getText(), valU);
                        double product = fL * fU;

                        String decA = format.format(valL);
                        String decC = format.format(delta);
                        String decB = format.format(valU);
                        String decFA = format.format(fL);
                        String decFB = format.format(fU);
                        String decError;

                        if (iterCount == 1) {
                            decError = " ";
                        } else {
                            double currentError = Math.abs(valU - prevU) / Math.abs(valU) * 100;
                            decError = format.format(currentError);
                        }

                        String sign;
                        if (product < 0) {
                            sign = "<0";
                        } else if (product > 0) {
                            sign = ">0";
                        } else {
                            sign = "0"; // Just in case the product is zero
                        }

                        Object[] rowData = {iterCount, decA, decC,
                            decB, decFA, decFB, decError, sign};
                        dataList.add(rowData);

                        if (error < marginE && fL * fU == 0) {
                            root = valU;
                            break;
                        }

                        if (fL * fU < 0) {
                            valL = valL;
                            delta /= 10.0;
                            root = valU;
                        } else if (fL * fU > 0){
                            valL = valU;
                            delta = delta;
                            root = valU;
                        }

                        prevU = valU;
                        valU = valL + delta;
                        error = Math.abs(valU - prevU) / Math.abs(valU) * 100;
                    }
                    DefaultTableModel model = (DefaultTableModel) tabl.getModel();
                    model.setRowCount(0);

                    for (Object[] row : dataList) {
                        model.addRow(row);
                    }
                     if(previousRowIndex != -1){
                       tabl.addRowSelectionInterval(previousRowIndex, previousRowIndex);
                       tabl.setSelectionBackground(CYAN);
                   }
                   
                   // Store the current row index before updating the interval
                   previousRowIndex = model.getRowCount() - 1;
                   lastRowIndex = previousRowIndex;
                   
                    if (lastRowIndex != -1){
                        tabl.addRowSelectionInterval(lastRowIndex, lastRowIndex);
                        tabl.setSelectionBackground(CYAN);
                    }
                    if (root != 0) {
                        String decRoot = format.format(root);
                        rrs.setText(decRoot);
                        graph(eqn.getText(), root);
                    } else {
                        JOptionPane.showMessageDialog(this, "No root found within the specified range.");
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

            //Bisection Method
        } else if (sel.getSelectedIndex() == 3){
            try {
                   
                if (eqn.getText().isEmpty() || en2.getText().isEmpty() || en3.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Enter the data needed, Thank you!");
                } else {
                    DecimalFormat format = new DecimalFormat("#.####");
                    ArrayList<Object[]> data = new ArrayList<>();
                    double MarginE = 0.0001;
                    double xL = Double.parseDouble(en2.getText());
                    double xU = Double.parseDouble(en3.getText());
                    double roott = 0;
                    double xM = (xL + xU) / 2.0;
                    int iterations = 0;
                    double prevXM = 0;
                    
                    int previousRowIndex = -1;
                    int lastRowIndex = -1;
                    
                    double Error = Math.abs(xM - prevXM) / Math.abs(xM) * 100;

                    while (Error > MarginE) {
                        iterations++;
                        double fxL = evaluate(eqn.getText(), xL);
                        double fxU = evaluate(eqn.getText(), xM);
                        double fxM = evaluate(eqn.getText(), xU);

                        String decimalnumA = format.format(xL);
                        String decimalnumB = format.format(xU);
                        String decimalnumC = format.format(xM);
                        String decimalnumFA = format.format(fxL);
                        String decimalnumbFC = format.format(fxU);
                        String decimalnumERROR;

                        if (iterations == 1) {
                            decimalnumERROR = " ";
                        } else {
                            double currentError = Math.abs(xM - prevXM) / Math.abs(xM) * 100;
                            decimalnumERROR = format.format(currentError);
                        }

                        Object[] rowData = {iterations, decimalnumA, decimalnumC,
                            decimalnumB, decimalnumFA, decimalnumbFC, decimalnumERROR};
                        data.add(rowData);

                        if (Math.abs(fxM) < MarginE) {
                            roott = xM;
                            break;
                        }

                        if (fxL * fxU < 0) {
                            xU = xM;
                            roott = xM;
                        } else {
                            xL = xM;
                            roott = xM;
                        }

                        prevXM = xM;
                        xM = (xL + xU) / 2;
                        Error = Math.abs(xM - prevXM) / Math.abs(xM) * 100;
                    }
                    DefaultTableModel model = (DefaultTableModel) tabl.getModel();
                    model.setRowCount(0);

                    for (Object[] row : data) {
                        model.addRow(row);
                    }
                   if(previousRowIndex != -1){
                       tabl.addRowSelectionInterval(previousRowIndex, previousRowIndex);
                       tabl.setSelectionBackground(CYAN);
                   }
                   
                   // Store the current row index before updating the interval
                   previousRowIndex = model.getRowCount() - 1;
                   lastRowIndex = previousRowIndex;
                   
                    if (lastRowIndex != -1){
                        tabl.addRowSelectionInterval(lastRowIndex, lastRowIndex);
                        tabl.setSelectionBackground(CYAN);
                    } 
                    if (roott != 0) {
                        String decimalRoot = format.format(roott);
                        rrs.setText(decimalRoot);
                        graph(eqn.getText(), roott);
                       
                    } else {
                        JOptionPane.showMessageDialog(this, "No root found within the specified range.");
                    }
                   
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_rstActionPerformed

    private void eqnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eqnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eqnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField en2;
    private javax.swing.JTextField en3;
    private javax.swing.JTextField eqn;
    private javax.swing.JPanel grp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel rrs;
    private javax.swing.JButton rst;
    private javax.swing.JComboBox<String> sel;
    private javax.swing.JTable tabl;
    // End of variables declaration//GEN-END:variables

    private double evaluate(String eqStr, double valX) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void graph(String text, double root) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
